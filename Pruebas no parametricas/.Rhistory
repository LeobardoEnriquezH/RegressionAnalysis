install.packages("Rfit")
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(Rfit)
datos<-Rfit::quail
View(datos)
library(stargazer)
library(Rfit)
library(ggplot2)
View(datos)
ggplot(datos, aes(x = treat, y = y, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
boxplot(datos$ldl,
ylab = "hwy",
main = "Boxplot of highway miles per gallon"
)
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
out <- boxplot.stats(datos$ldl)$out
boxplot(datos$ldl,
ylab = "hwy",
main = "Boxplot of highway miles per gallon"
)
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
out <- boxplot.stats(datos$ldl)$out
boxplot(datos$ldl,
ylab = "ldl",
main = "Boxplot of ldl"
)
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
out <- boxplot.stats(datos$ldl)$out
boxplot(datos$ldl,
ylab = "ldl",
main = "Boxplot of ldl"
)
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
out <- boxplot.stats(datos$ldl)$out
boxplot(datos$ldl,
ylab = "ldl",
main = ""
)
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
out <- boxplot.stats(datos$ldl)$out
boxplot(datos$ldl,
ylab = "ldl",
main = "", col = "skyblue")
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
out <- boxplot.stats(datos$ldl)$out
boxplot(datos$ldl,
ylab = "ldl",
main = "", col = "skyblue")
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()+theme_bw()
out <- boxplot.stats(datos$ldl)$out
boxplot(ldl ~ treat, data = datos,
ylab = "ldl",
main = "", col = "skyblue")
mtext(paste("Outliers: ", paste(out, collapse = ", ")))
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 1) +
geom_jitter()+theme_bw()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 1)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 1) +
geom_jitter()+theme_bw()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 2) +
geom_jitter()+theme_bw()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(123)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(123)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(123)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(123)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(123)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(12)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(4070)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(407)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(40)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(34)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
### Normalidad?
library(nortest)
# Lilliefors
lillie.test(datos$ldl[datos$treat=="1"])
lillie.test(datos$ldl[datos$treat=="2"])
lillie.test(datos$ldl[datos$treat=="3"])
lillie.test(datos$ldl[datos$treat=="4"])
### Normalidad?
library(nortest)
# Lilliefors
norm_g1<-lillie.test(datos$ldl[datos$treat=="1"])
norm_g2<-lillie.test(datos$ldl[datos$treat=="2"])
norm_g3<-lillie.test(datos$ldl[datos$treat=="3"])
norm_g4<-lillie.test(datos$ldl[datos$treat=="4"])
norm_g1$p.value
#Prueba de homocedasticidad
# H_o: las varianzas de los grupos es la misma vs H_a: al menos un grupo tiene una varianza diferente
bartlett<-bartlett.test(ldl~ treat, data = datos)
#Otra prueba más robusta
library(car)
levene<-leveneTest(ldl~ treat, data = datos)
fligner<-fligner.test(ldl~ treat, data = datos) #prueba no paramétrica
#Prueba de homocedasticidad
# H_o: las varianzas de los grupos es la misma vs H_a: al menos un grupo tiene una varianza diferente
bartlett<-bartlett.test(ldl~ treat, data = datos)
#Otra prueba más robusta
library(car)
levene<-leveneTest(ldl~ treat, data = datos)
fligner<-fligner.test(ldl~ treat, data = datos) #prueba no paramétrica
bartlett$p.value
levene$`Pr(>F)`
fligner$p.value
levene$`Pr(>F)`[1]
#Prueba de homocedasticidad
# H_o: las varianzas de los grupos es la misma vs H_a: al menos un grupo tiene una varianza diferente
bartlett<-bartlett.test(ldl~ treat, data = datos)
#Otra prueba más robusta
library(car)
levene<-leveneTest(ldl~ treat, data = datos)
levene1<-levene$`Pr(>F)`[1]
fligner<-fligner.test(ldl~ treat, data = datos) #prueba no paramétrica
#Prueba de homocedasticidad
# H_o: las varianzas de los grupos es la misma vs H_a: al menos un grupo tiene una varianza diferente
bartlett<-bartlett.test(ldl~ treat, data = datos)
#Otra prueba más robusta
library(car)
levene<-leveneTest(ldl~ treat, data = datos)
levene1<-levene$`Pr(>F)`[1]
fligner<-fligner.test(ldl~ treat, data = datos) #prueba no paramétrica
### Una alternativa no parámetrica es
#  la prueba de Kruskal-Wallis
library(PMCMRplus)
kruskal.test(ldl ~ treat, data = datos)  #usando distribución asintótica
### Una alternativa no parámetrica es
#  la prueba de Kruskal-Wallis
library(PMCMRplus)
### ¿Los grupos son iguales con respecto a la mediana?
#H0: las medianas son iguales vs Ha: al menos dos grupos tienen mediana diferente
# Algo equivalente a la prueba de la tabla ANOVA cuando se usa regresión
# lineal múltiple.
kruskal.test(ldl ~ treat, data = datos)  #usando distribución asintótica
#Distribución exacta sobre la estadística que es función de los rangos
kruskalTest(ldl ~ treat, data = datos, dist="KruskalWallis")
#Supuesto asintótico (por default)
kruskalTest(ldl ~ treat, data = datos, dist="Chisquare")
### Una alternativa no parámetrica es
#  la prueba de Kruskal-Wallis
library(PMCMRplus)
### ¿Los grupos son iguales con respecto a la mediana?
#H0: las medianas son iguales vs Ha: al menos dos grupos tienen mediana diferente
# Algo equivalente a la prueba de la tabla ANOVA cuando se usa regresión
# lineal múltiple.
kruskal.test(ldl ~ treat, data = datos)  #usando distribución asintótica
#Distribución exacta sobre la estadística que es función de los rangos
kruskalTest1<-kruskalTest(ldl ~ treat, data = datos, dist="KruskalWallis")
#Supuesto asintótico (por default)
kruskalTest(ldl ~ treat, data = datos, dist="Chisquare")
kruskalTest1$p.value
#Son pruebas simultáneas
ans <- kwAllPairsDunnTest(ldl ~ treat, data = datos)
summary(ans)
#Son pruebas simultáneas
ans <- kwAllPairsDunnTest(ldl ~ treat, data = datos)
summary(ans)
#Por ejemplo. A. Un grupo se toma de referencia y se hacen sólo las comparaciones
#de ese grupo con los demás
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
levels(datos$treat) #por default se hacen todas las comparaciones contra el grupo de referencia
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "2")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "3")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "4")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "1")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "2")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "3")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "4")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
# si quisieramos comparar trt2 con los demás:
datos$treat<- relevel(datos$treat, ref = "1")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
### si quisieramos comparar el grupo 2 con los demás:
#datos$treat<- relevel(datos$treat, ref = "2")
#ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
#summary(ans1)
#Por ejemplo. A. Un grupo se toma de referencia y se hacen sólo las comparaciones
#de ese grupo con los demás
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
levels(datos$treat) #por default se hacen todas las comparaciones contra el grupo de referencia
# B. Se puede especificar sentido para poder obtener más control en la significancia
# Sólo si los investigadores tienen esa hipótesis
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
# con base en lo último no se puede conluir con alpha=.05 que el tratamiento 2 es mejor que ambos, el tratamiento 1 y el control.
# sin embargo con alpha=.1 sí es posible concluir eso
### si quisieramos comparar el grupo 2 con los demás:
datos$treat<- relevel(datos$treat, ref = "2")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
### si quisieramos comparar el grupo 2 con los demás:
datos$treat<- relevel(datos$treat, ref = "3")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
### si quisieramos comparar el grupo 2 con los demás:
datos$treat<- relevel(datos$treat, ref = "4")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
### si quisieramos comparar el grupo 2 con los demás:
datos$treat<- relevel(datos$treat, ref = "1")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
### si quisieramos comparar el grupo 2 con los demás:
#datos$treat<- relevel(datos$treat, ref = "1")
#ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
#summary(ans1)
### si quisieramos comparar el grupo 2 con los demás:
datos$treat<- relevel(datos$treat, ref = "2")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
### si quisieramos comparar el grupo 2 con los demás:
datos$treat<- relevel(datos$treat, ref = "1")
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
# B. Se puede especificar sentido para poder obtener más control en la significancia
# Sólo si los investigadores tienen esa hipótesis
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less", alpha=0.1)
summary(ans1)
# con base en lo último no se puede conluir con alpha=.05 que el grupo 1 es mejor que el grupo 3 y 4, pero sí que el 2.
# B. Se puede especificar sentido para poder obtener más control en la significancia
# Sólo si los investigadores tienen esa hipótesis
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less", alpha=0.5)
summary(ans1)
# con base en lo último no se puede conluir con alpha=.05 que el grupo 1 es mejor que el grupo 3 y 4, pero sí que el 2.
# B. Se puede especificar sentido para poder obtener más control en la significancia
# Sólo si los investigadores tienen esa hipótesis
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less", alpha=0.1)
summary(ans1)
# con base en lo último no se puede conluir con alpha=.05 que el grupo 1 es mejor que el grupo 3 y 4, pero sí que el 2.
# B. Se puede especificar sentido para poder obtener más control en la significancia
# Sólo si los investigadores tienen esa hipótesis
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less", alpha=0.05)
summary(ans1)
# con base en lo último no se puede conluir con alpha=.05 que el grupo 1 es mejor que el grupo 3 y 4, pero sí que el 2.
knitr::opts_chunk$set(echo = TRUE)
library(stargazer)
library(Rfit)
library(ggplot2)
datos<-Rfit::quail
set.seed(340)
ggplot(datos, aes(x = treat, y = ldl, colour = treat)) +
geom_boxplot(outlier.shape = 3) +
geom_jitter()+theme_bw()
### Normalidad?
library(nortest)
# Lilliefors
norm_g1<-lillie.test(datos$ldl[datos$treat=="1"])
norm_g2<-lillie.test(datos$ldl[datos$treat=="2"])
norm_g3<-lillie.test(datos$ldl[datos$treat=="3"])
norm_g4<-lillie.test(datos$ldl[datos$treat=="4"])
#Prueba de homocedasticidad
# H_o: las varianzas de los grupos es la misma vs H_a: al menos un grupo tiene una varianza diferente
bartlett<-bartlett.test(ldl~ treat, data = datos)
#Otra prueba más robusta
library(car)
levene<-leveneTest(ldl~ treat, data = datos)
levene1<-levene$`Pr(>F)`[1]
fligner<-fligner.test(ldl~ treat, data = datos) #prueba no paramétrica
### Una alternativa no parámetrica es
#  la prueba de Kruskal-Wallis
library(PMCMRplus)
### ¿Los grupos son iguales con respecto a la mediana?
#H0: las medianas son iguales vs Ha: al menos dos grupos tienen mediana diferente
# Algo equivalente a la prueba de la tabla ANOVA cuando se usa regresión
# lineal múltiple.
kruskal.test(ldl ~ treat, data = datos)  #usando distribución asintótica
#Distribución exacta sobre la estadística que es función de los rangos
kruskalTest1<-kruskalTest(ldl ~ treat, data = datos, dist="KruskalWallis")
#Supuesto asintótico (por default)
kruskalTest(ldl ~ treat, data = datos, dist="Chisquare")
#Son pruebas simultáneas
ans <- kwAllPairsDunnTest(ldl ~ treat, data = datos)
summary(ans)
#Por ejemplo. A. Un grupo se toma de referencia y se hacen sólo las comparaciones
#de ese grupo con los demás
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
summary(ans1)
levels(datos$treat) #por default se hacen todas las comparaciones contra el grupo de referencia
### si quisieramos comparar el grupo 2 con los demás:
#datos$treat<- relevel(datos$treat, ref = "2")
#ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos)
#summary(ans1)
# B. Se puede especificar sentido para poder obtener más control en la significancia
# Sólo si los investigadores tienen esa hipótesis
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
# con base en lo último no se puede conluir con alpha=.05 que el grupo 1 es mejor que el grupo 3 y 4, pero sí que el 2.
### si quisieramos comparar el grupo 2 con los demás:
#datos$treat<- relevel(datos$treat, ref = "1")
#ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
#summary(ans1)
# B. Se puede especificar sentido para poder obtener más control en la significancia
# Sólo si los investigadores tienen esa hipótesis
ans1 <- kwManyOneDunnTest(ldl ~ treat, data = datos, alternative = "less")
summary(ans1)
# con base en lo último no se puede conluir con alpha=.05 que el grupo 1 es mejor que el grupo 3 y 4, pero sí que el 2.
