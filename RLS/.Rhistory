# Print the prediction interval values
cat("Lower Limit:", lower_limit, "\n")
cat("Predicted Sales:", predicted_sales, "\n")
cat("Upper Limit:", upper_limit, "\n")
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "Sales Forecasting",
xlab = "Advertising Expenses (in thousands of dollars)",
ylab = "Sales (in thousands of units)", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(new.data, predicted_value, col = "red", pch = 16)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "Sales Forecasting",
xlab = "Advertising Expenses (in thousands of dollars)",
ylab = "Sales (in thousands of units)", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(new.dat, predicted_value, col = "red", pch = 16)
segments(new.data, lower_limit, new.data,
upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "Sales Forecasting",
xlab = "Advertising Expenses (in thousands of dollars)",
ylab = "Sales (in thousands of units)", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(new.dat, predicted_value, col = "red", pch = 16)
segments(new.dat, lower_limit, new.dat,
upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "Sales Forecasting",
xlab = "Advertising Expenses (in thousands of dollars)",
ylab = "Sales (in thousands of units)", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
segments(70, lower_limit, 70,
upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
segments(70, lower_limit, 70,
upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
segments(70, lower_limit, 70,
upper_limit, col = "red", lwd = 2)
annotate("point", x = 70, y = 145, colour = "red")
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
segments(70, lower_limit, 70,
upper_limit, col = "red", lwd = 2)
annotate("point", x = 70, y = 145, colour = "red")
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
segments(70, lower_limit, 70,
upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
points(70, 145, col = "blue", pch = 16)
segments(70, lower_limit, 70,
upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
points(70, 145, col = "blue", pch = 16)
segments(70, lower_limit, 70, upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
points(70, 145, col = "blue", pch = 16)
#segments(70, lower_limit, 70, upper_limit, col = "red", lwd = 2)
segments(70, lower_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
points(70, 145, col = "blue", pch = 16)
segments(70, lower_limit, 70, upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "",
xlab = "",
ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
points(70, 145, col = "blue", pch = 16)
segments(70, lower_limit, 70, upper_limit, col = "red", lwd = 2)
# Extract the prediction interval values
lower_limit <- predict[1, "lwr"]
predicted_value <- predict[1, "fit"]
upper_limit <- predict[1, "upr"]
# Print the prediction interval values
#cat("Lower Limit:", lower_limit, "\n")
#cat("Predicted Sales:", predicted_sales, "\n")
#cat("Upper Limit:", upper_limit, "\n")
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "", xlab = "", ylab = "", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
points(70, 145, col = "blue", pch = 16)
segments(70, lower_limit, 70, upper_limit, col = "red", lwd = 2)
# Plot the prediction interval on a graph
plot(Datos6$x, Datos6$y, main = "", xlab = "X", ylab = "Y", pch = 16)
# Add the regression line
abline(fit, col = "green")
# Add the predicted point
points(70, predicted_value, col = "red", pch = 16)
points(70, 145, col = "blue", pch = 16)
segments(70, lower_limit, 70, upper_limit, col = "red", lwd = 2)
knitr::opts_chunk$set(echo = TRUE)
modelo2<-lm(data=datos7, api00 ~ I(log(meals2)))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(stargazer)
library(performance)
library(flextable)
library(see)
library(lmtest)
library(qqplotr)
library(ggrepel)
library(patchwork)
library(boot)
library(rempsyc)
library(report)
library(multcomp)
datos7<-read_csv("performance.csv", show_col_types = FALSE)
modelo1<-lm(data=datos7, api00~meals)
#summary(modelo1)
#stargazer(modelo1)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo1)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
plot(modelo1)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo1, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
bc<-car::powerTransform(modelo1)
datos7$meals2<-datos7$meals+1 #sumamos 1 porque hay un valor de 0 (no positivo)
#car::boxTidwell(api00~meals2, data = datos7)
modelo2<-lm(data=datos7, api00 ~ I(log(meals2)))
summary(modelo2)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo2)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
plot(modelo2)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo2, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
par(mfrow = c(2, 2))
plot(modelo2)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(stargazer)
library(performance)
library(flextable)
library(see)
library(lmtest)
library(qqplotr)
library(ggrepel)
library(patchwork)
library(boot)
library(rempsyc)
library(report)
library(multcomp)
datos7<-read_csv("performance.csv", show_col_types = FALSE)
modelo1<-lm(data=datos7, api00~meals)
#summary(modelo1)
#stargazer(modelo1)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo1)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
plot(modelo1)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo1, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
bc<-car::powerTransform(modelo1)
datos7$meals2<-datos7$meals+1 #sumamos 1 porque hay un valor de 0 (no positivo)
#car::boxTidwell(api00~meals2, data = datos7)
modelo2<-lm(data=datos7, api00 ~ I(log(meals2)))
summary(modelo2)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo2)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
plot(modelo2)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo2, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
plot((datos7$meals), (datos7$api00))
bc<-car::powerTransform(modelo2)
car::powerTransform(modelo2)
modelo3<-lm(data=datos7, I(api00^(5/2)) ~ I(log(meals2)))
summary(modelo3)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo3)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo3, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
library(stargazer)
library(performance)
library(flextable)
library(see)
library(lmtest)
library(qqplotr)
library(ggrepel)
library(patchwork)
library(boot)
library(rempsyc)
library(report)
library(multcomp)
datos7<-read_csv("performance.csv", show_col_types = FALSE)
modelo1<-lm(data=datos7, api00~meals)
#summary(modelo1)
#stargazer(modelo1)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo1)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
plot(modelo1)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo1, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
bc<-car::powerTransform(modelo1)
datos7$meals2<-datos7$meals+1 #sumamos 1 porque hay un valor de 0 (no positivo)
#car::boxTidwell(api00~meals2, data = datos7)
modelo2<-lm(data=datos7, api00 ~ I(log(meals2)))
summary(modelo2)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo2)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
plot(modelo2)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo2, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
car::powerTransform(modelo2)
modelo3<-lm(data=datos7, I(api00^(5/2)) ~ I(log(meals2)))
summary(modelo3)
#nice_assumptions from package rempsyc
table_tests<-nice_assumptions(modelo3)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
#nice_assumptions()
#table_nice
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 2))
#####check_model() function of performance package: Graphs####
# return a list of single plots
diagnostic_plots <- plot(check_model(modelo3, panel = FALSE))
# linearity
diagnostic_plots[[2]]
# normally distributed residuals
diagnostic_plots[[5]] #6
# homoscedasticiy - homogeneity of variance
diagnostic_plots[[3]]
# influential observations - outliers
diagnostic_plots[[4]]
